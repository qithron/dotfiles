#!/usr/bin/env python

import sys
import json
import subprocess

#### monitor
# name id randrId wired stickyCount
# windowGap borderWidth focusedDesktopId
# padding rectangle desktops

#### desktop
# name id layout userLayout windowGap borderWidth focusedNodeId padding root

#### node
# id splitType splitRatio
# vacant hidden sticky private locked marked presel
# rectangle constraints firstChild secondChild client

#### -> client
# className instanceName
# borderWidth state lastState layer lastLayer
# urgent shown tiledRectangle floatingRectangle

def print(*args, **kwargs):
    kwargs['end'] = ''
    __builtins__.print(*args, **kwargs)

def node(d, n, m=''):
    if d is None:
        return
    if d['client'] is not None:
        print(f"bspc node {d['id']:12d} ")
        if d['hidden']:
            print('-g hidden ')
        else:
            print('-f        ')
        print('#', m, n, ' ')
        proc = 'xprop', '-id', str(d['id']), '-notype', 'WM_NAME'
        proc = subprocess.run(proc,
            check=False, capture_output=True, encoding='utf8')
        proc = proc.stdout.split('=', 1)[1].strip()[1:-1]
        print(proc)
        for v in ('hidden', 'sticky', 'private', 'locked', 'marked'):
            if d[v]:
                print(v, end=' ')
        print('\n')
    if d['firstChild'] is not None:
        node(d['firstChild'], n, m)
    if d['secondChild'] is not None:
        node(d['secondChild'], n, m)

def bspc_query_monitor(all=False):
    all = '--names -M' if all else '-M -m --names'
    proc = subprocess.run(f'bspc query {all}', encoding='utf8',
        shell=True, check=True, capture_output=True)
    return [v for v in proc.stdout.split('\n') if v]

def bspc_query_tree(a):
    proc = subprocess.run(f'bspc query --tree {a}',
        shell=True, check=True, capture_output=True)
    return json.loads(proc.stdout)

def main():
    if '--desktop' in sys.argv:
        d = bspc_query_tree('--desktop')
        node(d['root'], 0, d['name'])
    elif '--monitor' in sys.argv:
        for d in bspc_query_tree('--monitor')['desktops']:
            node(d['root'], d['name'])
    elif '--all' in sys.argv:
        lst = bspc_query_monitor(True)
        l = len(max(lst, key=len))
        for m in lst:
            m = f'{m:{l}s}'
            d = bspc_query_tree(f'--monitor {m}')
            for v in d['desktops']:
                node(v['root'], v['name'], m)
    else:
        sys.exit(1)

if __name__ == '__main__':
    main()
