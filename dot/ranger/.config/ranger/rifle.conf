# vim: ft=cfg
#
# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | A graphical environment is available (darwin, Xorg, or Wayland)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.


mime ^audio|inode/directory = mpv --vid=no --loop-playlist=inf --no-audio-display -- "$@"
mime ^audio|inode/directory = mpv --vid=no --loop-playlist=inf --no-audio-display --shuffle -- "$@"


mime ^video, X, terminal = mpv --wid="$WINDOWID" -- "$@"
mime ^video, X, flag f   = mpv -- "$@"

mime ^video, !X = mpv --vid=no -- "$@"


mime ^image, X, terminal = mvi --wid="$WINDOWID" -- "$@"
mime ^image, X, flag f   = mvi -- "$@"


ext ace|ar|arc|bz2?|cab|cpio|cpt|deb = atool -l -e -- "$@" | "$PAGER"
ext iso|jar|msi|pkg|rar|shar|tar|tgz = atool -l -e -- "$@" | "$PAGER"
ext 7z|dgc|dmg|gz|zstxar|xpi|xz|zip  = atool -l -e -- "$@" | "$PAGER"

ext ace|ar|arc|bz2?|cab|cpio|cpt|deb = atool -v -x -e -- "$@"
ext iso|jar|msi|pkg|rar|shar|tar|tgz = atool -v -x -e -- "$@"
ext 7z|dgc|dmg|gz|zstxar|xpi|xz|zip  = atool -v -x -e -- "$@"


mime text/*|application/json|application/x-shellscript = "$EDITOR" -- "$@"
mime text/*|application/json|application/x-shellscript = "$PAGER" -- "$@"

else = ask
else = tar -v -c -f "$1.$(date -u +%Y%m%d%H%M%S).tar" "$(basename "$1")"

label a, else = tar -v -c -f "$1.tar" "$(basename "$1")"
label e, else = "$EDITOR" -- "$@"
label p, else = "$PAGER" -- "$@"

label editor, else = "$EDITOR" -- "$@"
label pager,  else = "$PAGER" -- "$@"

else = chmod +x -- "$@"
else = chmod -x -- "$@"
